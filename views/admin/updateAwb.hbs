<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>adminUpdate</title>
    <!-- CSS Dependencies -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <meta id="awbMeta" name="awb-number" content="{{shipment.awbNumber}}">


    <style>
        :root {
            --primary: #3b82f6;
            --primary-dark: #2563eb;
            --primary-light: #60a5fa;
            --success: #22c55e;
            --success-light: #4ade80;
            --warning: #f59e0b;
            --danger: #ef4444;
            --background: #f8fafc;
            --surface: #ffffff;
            --text: #0f172a;
            --text-light: #64748b;
            --border: #e2e8f0;
            --border-light: #f1f5f9;
            --primary-gradient: linear-gradient(135deg, #4361ee 0%, #4895ef 100%);
            --glass-bg: rgba(255, 255, 255, 0.95);
            --glass-shadow: 0 8px 32px rgba(31, 38, 135, 0.15);
            --card-border: 1px solid rgba(255, 255, 255, 0.18);
            --neon-glow: 0 0 15px rgba(67, 97, 238, 0.3);
            --sidebar-width: 280px;
            --sidebar-bg: rgba(15, 23, 42, 0.95);
            --sidebar-hover: rgba(30, 41, 59, 0.8);
            --neon-accent: #0ea5e9;
            --glass-effect: blur(10px);
        }

        .wrapper {
            display: flex;
            min-height: 100vh;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--background);
            color: var(--text);
            min-height: 100vh;
        }

        /* Sidebar Base Styles */
        .sidebar {
            width: var(--sidebar-width);
            background: var(--sidebar-bg);
            backdrop-filter: var(--glass-effect);
            -webkit-backdrop-filter: var(--glass-effect);
            border-right: 1px solid rgba(255, 255, 255, 0.1);
            position: fixed;
            height: 100vh;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            overflow-y: auto;
            scrollbar-width: none;
            z-index: 1000;
        }

        .sidebar::-webkit-scrollbar {
            display: none;
        }

        /* Logo Section */
        .sidebar .logo {
            padding: 2rem 1.5rem;
            background: linear-gradient(to bottom,
                    rgba(15, 23, 42, 0.98),
                    rgba(15, 23, 42, 0.95));
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
        }

        .sidebar .logo h4 {
            font-size: 1.25rem;
            font-weight: 600;
            background: linear-gradient(120deg, #fff, var(--neon-accent));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            letter-spacing: 0.5px;
        }

        /* Navigation Links */
        .sidebar .nav-link {
            color: rgba(255, 255, 255, 0.7);
            padding: 1rem 1.5rem;
            margin: 0.3rem 0.8rem;
            border-radius: 12px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            position: relative;
            text-decoration: none;
        }

        .sidebar .nav-link:hover {
            background: var(--sidebar-hover);
            color: var(--neon-accent);
            box-shadow: var(--neon-glow);
        }

        .sidebar .nav-link i {
            margin-right: 1rem;
            font-size: 1.1rem;
            transition: all 0.3s ease;
        }

        .sidebar .nav-link.active-nav-link {
            background: rgba(14, 165, 233, 0.15);
            color: var(--neon-accent);
            box-shadow: var(--neon-glow);
        }

        .sidebar .nav-link.active-nav-link::before {
            content: '';
            position: absolute;
            left: -0.8rem;
            top: 50%;
            transform: translateY(-50%);
            width: 4px;
            height: 20px;
            background: var(--neon-accent);
            border-radius: 0 4px 4px 0;
            box-shadow: var(--neon-glow);
        }

        .nav.flex-column {
            padding: 1rem 0;
        }

        /* Main Container Styles */
        .tracking-container {

            width: calc(100% - var(--sidebar-width));
            margin-left: var(--sidebar-width);


        }

        .tracking-grid {
            display: grid;
            grid-template-columns: 350px 1fr;
            gap: 2rem;
            margin-top: 2rem;
        }

        /* Status Card Styles */
        .status-card {
            background: var(--surface);
            border-radius: 16px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.05);
            padding: 1.5rem;
            border: 1px solid var(--border);
            position: sticky;
            top: 5rem;
        }

        .status-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .tracking-number {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text);
        }

        .status-badge {
            background: linear-gradient(135deg, var(--success), var(--success-light));
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 9999px;
            font-size: 0.875rem;
            font-weight: 500;
        }

        /* Timeline Styles */
        .timeline-section {
            background: var(--surface);
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.05);
        }

        .timeline-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2.5rem;
        }

        .add-location-btn {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 12px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }

        .add-location-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(37, 99, 235, 0.2);
        }

        .timeline-wrapper {
            position: relative;
            padding-left: 4rem;
            margin-top: 3rem;
        }

        .timeline-line {
            position: absolute;
            left: 18px;
            top: 0;
            height: 100%;
            width: 3px;
            background: var(--border-light);
            border-radius: 99px;
        }

        .timeline-progress {
            position: absolute;
            left: 18px;
            top: 0;
            width: 3px;
            background: linear-gradient(to bottom, var(--success), var(--primary));
            border-radius: 99px;
            transition: height 0.5s ease;
        }

        .timeline-item {
            position: relative;
            padding: 1.5rem 0;
        }

        .timeline-marker {
            position: absolute;
            left: -4rem;
            width: 38px;
            height: 38px;
            border-radius: 50%;
            background: var(--surface);
            border: 3px solid var(--border);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 2;
            transition: all 0.3s ease;
            box-shadow: 0 0 0 6px var(--surface);
        }

        .timeline-marker::before {
            content: '';
            position: absolute;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: rgba(59, 130, 246, 0.1);
            opacity: 0;
            transform: scale(0.8);
            transition: all 0.3s ease;
        }

        .timeline-marker:hover::before {
            opacity: 1;
            transform: scale(1);
        }

        .timeline-marker i {
            font-size: 16px;
            color: white;
            opacity: 0;
            transform: scale(0.5);
            transition: all 0.3s ease;
        }

        .timeline-marker.completed {
            background: var(--success);
            border-color: var(--success-light);
        }

        .timeline-marker.active {
            background: var(--primary);
            border-color: var(--primary-light);
            animation: pulse 2s infinite;
        }

        .timeline-marker.completed i,
        .timeline-marker.active i {
            opacity: 1;
            transform: scale(1);
        }

        @keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.4);
            }

            70% {
                box-shadow: 0 0 0 15px rgba(59, 130, 246, 0);
            }

            100% {
                box-shadow: 0 0 0 0 rgba(59, 130, 246, 0);
            }
        }

        .timeline-content {
            background: var(--surface);
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 1.75rem;
            margin-left: 1rem;
            transition: all 0.3s ease;
            position: relative;
        }

        .timeline-content::before {
            content: '';
            position: absolute;
            left: -9px;
            top: 30px;
            width: 18px;
            height: 18px;
            background: var(--surface);
            border-left: 1px solid var(--border);
            border-bottom: 1px solid var(--border);
            transform: rotate(45deg);
        }

        .timeline-content:hover {
            transform: translateX(5px);
            border-color: var(--primary-light);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }

        /* Form Styles */
        .add-location-form {
            background: var(--surface);
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 2rem;
            border: 1px solid var(--border);
            display: none;
        }

        .form-control,
        .form-select {
            border: 1px solid var(--border);
            border-radius: 10px;
            padding: 0.875rem 1rem;
            transition: all 0.3s ease;
        }

        .form-control:focus,
        .form-select:focus {
            border-color: var(--primary-light);
            box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
        }

        /* Action Buttons */
        .action-buttons {
            position: absolute;
            right: 1.5rem;
            top: 1.5rem;
            display: flex;
            gap: 0.5rem;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .timeline-content:hover .action-buttons {
            opacity: 1;
        }

        .btn-icon {
            background: var(--border-light);
            border: none;
            width: 32px;
            height: 32px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-light);
            transition: all 0.3s ease;
        }

        .btn-icon:hover {
            background: var(--primary);
            color: white;
            transform: translateY(-2px);
        }

        .btn-icon.delete:hover {
            background: var(--danger);
        }
        .delete-timeline-btn {
        opacity: 0;
        transition: opacity 0.2s ease;
        background: none;
        border: none;
        padding: 5px;
        cursor: pointer;
    }
    
    .timeline-item:hover .delete-timeline-btn {
        opacity: 1;
    }
    
    .btn-icon i {
        font-size: 14px;
    }
    </style>

<body>
    <div class="wrapper">
        <!-- Sidebar -->
        <nav class="sidebar">
            <div class="logo">
                <h4 class="mb-0">E Gate Shipping</h4>
            </div>
            <div class="nav flex-column">
                <a href="/admin/track" class="nav-link ">
                    <i class="bi bi-truck"></i>
                    Tracking
                </a>

                <a href="/admin/createAwb" class="nav-link">
                    <i class="bi bi-files"></i>
                    Create AWB
                </a>

                <a href="/admin/mawb" class="nav-link ">
                    <i class="bi bi-file-earmark-break"></i>
                    Master AWB
                </a>

                <a href="/admin/fetchShipment" class="nav-link active-nav-link">
                    <i class="bi bi-pencil-square"></i>
                    Update AWB
                </a>
                <a href="/admin/getShipment" class="nav-link ">
                    <i class="bi bi-boxes"></i>
                    All Shipments
                </a>
                <a href="/admin/airlines" class="nav-link">
                    <i class="bi bi-cloud"></i>
                    Airlines
                </a>
                <a href="/admin/profile" class="nav-link">
                    <i class="bi bi-gear"></i>
                    Admin Profile
                </a>

            </div>
        </nav>

        <div class="tracking-container">
            <div class="tracking-grid">
                <!-- Shipment Status Card -->
                <div class="status-card">
                    <div class="status-header">
                        <div>
                            <span class="status-badge">{{shipment.status}}</span>
                            <div class="tracking-number mt-2" id="awbNumber">#{{shipment.awbNumber}}</div>
                        </div>
                        <button class="btn-icon" onclick="window.trackingSystem.refresh()">
                            <i class="fas fa-sync-alt"></i>
                        </button>
                    </div>

<div class="status-info">
    <div class="info-item mb-4">
        <div class="text-muted mb-2">Expected Delivery</div>
        <div class="d-flex align-items-center gap-2">
            <i class="fas fa-clock text-primary"></i>
            <div>
                <div class="d-flex align-items-center">
                    <div class="fw-semibold" id="estimatedDelivery">{{formatDate shipment.estimatedDeliveryDate}}</div>
                    <button class="btn-icon ms-2" >
                        <i class="fas fa-edit"></i>
                    </button>
                </div>
                <div class="small text-muted">By End of Day</div>
            </div>
        </div>
    </div>

    <!-- Add a new section for Signed By -->
    <div class="info-item mb-4">
        <div class="text-muted mb-2">Signed By</div>
        <div class="d-flex align-items-center gap-2">
            <i class="fas fa-signature text-primary"></i>
            <div>
                <div class="d-flex align-items-center">
                    <div class="fw-semibold" id="signedBy">{{#if shipment.signedBy}}{{shipment.signedBy}}{{else}}Not signed yet{{/if}}</div>
                    <button class="btn-icon ms-2">
                        <i class="fas fa-edit"></i>
                    </button>
                </div>
                <div class="small text-muted" id="signedDate">
                    {{#if shipment.signedAt}}Signed on: {{formatDate shipment.signedAt}}{{else}}Pending signature{{/if}}
                </div>
            </div>
        </div>
    </div>

    <div class="info-item mb-4">
        <div class="text-muted mb-2">Current Location</div>
        <div class="d-flex align-items-center gap-2">
            <i class="fas fa-map-marker-alt text-primary"></i>
            <div>
                <div class="fw-semibold" id="currentLocation">{{currentLocation}}</div>
                <div class="small text-muted" id="facilityType">{{facilityType}}</div>
            </div>
        </div>
    </div>
</div>

                </div>

                <!-- Timeline Section -->
                <div class="timeline-section">
                    <div class="timeline-header">
                        <h4 class="m-0">Tracking Timeline</h4>
                        <button class="add-location-btn" onclick="window.trackingSystem.toggleAddLocationForm()">
                            <i class="fas fa-plus"></i>
                            Add Location
                        </button>
                    </div>

                    <!-- Add Location Form -->
                    <div class="add-location-form" id="addLocationForm">
                        <h5 class="mb-4">Add New Location</h5>
                        <form id="locationForm" action="/admin/addLocation/{{shipment.awbNumber}}" method="POST">

                            <div class="row g-3">
                                <div class="col-md-6">
                                    <input type="text" class="form-control" name="location" placeholder="Location Name"
                                        required>
                                </div>
                                <div class="col-md-6">
                                    <input type="text" class="form-control" name="description"
                                        placeholder="Description">
                                </div>
                                <div class="col-md-6">
                                    <select class="form-select" name="status" required>
                                        <option value="">Select Status</option>
                                        <option value="Picked Up">Picked Up</option>
                                        <option value="In Transit">In Transit</option>
                                        <option value="Out for Delivery">Out for Delivery</option>
                                        <option value="Delivered">Delivered</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <div class="d-flex gap-2">
                                        <button type="submit" class="btn btn-primary flex-grow-1">Add Location</button>
                                        <button type="button" class="btn btn-light"
                                            onclick="window.trackingSystem.toggleAddLocationForm()">Cancel</button>
                                    </div>
                                </div>
                            </div>
                        </form>

                    </div>

                    <div class="container">
                        <div class="timeline-wrapper">
                            <div class="timeline-line"></div>
                            <div class="timeline-progress" id="progressLine"></div>
                            {{#each timeline}}
                            <div class="timeline-item" data-timeline-id="{{this._id}}" data-status="{{this.status}}"
    data-completed="{{this.isCompleted}}">
    <div class="timeline-marker {{#if this.isCompleted}}completed{{else if @last}}active{{/if}}">
        <i class="fas fa-check"></i>
    </div>
    <div class="timeline-content {{#if this.isCompleted}}completed{{else if @last}}active{{/if}}">
        <div class="location-info">
            <h5>{{this.location}}</h5>
            <p class="location-address mb-2">
                <i class="fas fa-map-marker-alt me-2 text-primary"></i>{{this.description}}
            </p>
            <div class="d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center gap-3">
                    <span class="location-timestamp">
                        <i class="far fa-clock me-2"></i>{{formatDate this.timestamp}}
                    </span>
                    <span class="status-badge">
                        {{this.status}}
                    </span>
                </div>
                <button class="btn-icon delete-timeline-btn" data-timeline-id="{{this._id}}">
                    <i class="fas fa-trash-alt text-danger"></i>
                </button>
            </div>
        </div>
    </div>
</div>
                            {{/each}}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      // Add this to your existing JavaScript code

document.addEventListener('DOMContentLoaded', function() {
    // Get references to the edit buttons
    const editEstimatedDeliveryBtn = document.querySelector('#estimatedDelivery').nextElementSibling;
    const editSignedByBtn = document.querySelector('#signedBy').nextElementSibling;
    
    // Add event listeners to the buttons
    editEstimatedDeliveryBtn.addEventListener('click', function() {
        openEstimatedDeliveryModal();
    });
    
    editSignedByBtn.addEventListener('click', function() {
        openSignedByModal();
    });
    
    // Function to create and open the Estimated Delivery modal
    function openEstimatedDeliveryModal() {
        const currentDate = document.getElementById('estimatedDelivery').textContent.trim();
        
        // Create modal HTML
        const modalHTML = `
        <div class="modal fade" id="estimatedDeliveryModal" tabindex="-1" aria-labelledby="estimatedDeliveryModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="estimatedDeliveryModalLabel">Update Estimated Delivery</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="estimatedDeliveryForm">
                            <div class="mb-3">
                                <label for="deliveryDate" class="form-label">Estimated Delivery Date</label>
                                <input type="date" class="form-control" id="deliveryDate" value="${currentDate}" required>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="saveEstimatedDelivery">Save</button>
                    </div>
                </div>
            </div>
        </div>
        `;
        
        // Add modal to the document
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        
        // Initialize and show the modal
        const modal = new bootstrap.Modal(document.getElementById('estimatedDeliveryModal'));
        modal.show();
        
        // Add event listener to the save button
        document.getElementById('saveEstimatedDelivery').addEventListener('click', function() {
            const newDeliveryDate = document.getElementById('deliveryDate').value;
            updateEstimatedDelivery(newDeliveryDate);
            modal.hide();
            
            // Remove modal from DOM after hiding
            document.getElementById('estimatedDeliveryModal').addEventListener('hidden.bs.modal', function() {
                this.remove();
            });
        });
    }
    
    // Function to create and open the Signed By modal
    function openSignedByModal() {
        const currentSignedBy = document.getElementById('signedBy').textContent.trim();
        const signedDate = document.getElementById('signedDate').textContent.includes('Signed on:') ? 
                          document.getElementById('signedDate').textContent.replace('Signed on:', '').trim() : '';
        
        // Create modal HTML
        const modalHTML = `
        <div class="modal fade" id="signedByModal" tabindex="-1" aria-labelledby="signedByModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="signedByModalLabel">Update Signature Information</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="signedByForm">
                            <div class="mb-3">
                                <label for="signatureName" class="form-label">Signed By</label>
                                <input type="text" class="form-control" id="signatureName" value="${currentSignedBy === 'Not signed yet' ? '' : currentSignedBy}" placeholder="Enter name" required>
                            </div>
                            <div class="mb-3">
                                <label for="signatureDate" class="form-label">Signature Date</label>
                                <input type="date" class="form-control" id="signatureDate" value="${signedDate}">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="saveSignedBy">Save</button>
                    </div>
                </div>
            </div>
        </div>
        `;
        
        // Add modal to the document
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        
        // Initialize and show the modal
        const modal = new bootstrap.Modal(document.getElementById('signedByModal'));
        modal.show();
        
        // Add event listener to the save button
        document.getElementById('saveSignedBy').addEventListener('click', function() {
            const newSignedBy = document.getElementById('signatureName').value;
            const newSignedDate = document.getElementById('signatureDate').value;
            updateSignedBy(newSignedBy, newSignedDate);
            modal.hide();
            
            // Remove modal from DOM after hiding
            document.getElementById('signedByModal').addEventListener('hidden.bs.modal', function() {
                this.remove();
            });
        });
    }
    
    // Function to update Estimated Delivery
    async function updateEstimatedDelivery(newDate) {
        const awbNumber = document.getElementById('awbNumber').textContent.replace('#', '');
        
        try {
            const response = await fetch(`/admin/updateDeliveryDate/${awbNumber}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    estimatedDeliveryDate: newDate
                })
            });
            
            if (!response.ok) {
                throw new Error('Server responded with error');
            }
            
            const data = await response.json();
            
            if (data.success) {
                // Update UI
                document.getElementById('estimatedDelivery').textContent = formatDate(newDate);
                alert('Estimated delivery date updated successfully!');
            } else {
                alert(data.message || 'Failed to update estimated delivery date');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('An error occurred while updating estimated delivery date');
        }
    }
    
    // Function to create and open the Signed By modal
function openSignedByModal() {
    const currentSignedBy = document.getElementById('signedBy').textContent.trim();
    const signedDate = document.getElementById('signedDate').textContent.includes('Signed on:') ? 
                      document.getElementById('signedDate').textContent.replace('Signed on:', '').trim() : '';
    
    // Get current date-time in local ISO format for the input
    const now = new Date();
    const localDatetime = now.toISOString().slice(0, 16); // Format: YYYY-MM-DDThh:mm
    
    // Create modal HTML with datetime-local input instead of just date
    const modalHTML = `
    <div class="modal fade" id="signedByModal" tabindex="-1" aria-labelledby="signedByModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="signedByModalLabel">Update Signature Information</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="signedByForm">
                        <div class="mb-3">
                            <label for="signatureName" class="form-label">Signed By</label>
                            <input type="text" class="form-control" id="signatureName" value="${currentSignedBy === 'Not signed yet' ? '' : currentSignedBy}" placeholder="Enter name" required>
                        </div>
                        <div class="mb-3">
                            <label for="signatureDateTime" class="form-label">Signature Date & Time</label>
                            <input type="datetime-local" class="form-control" id="signatureDateTime" value="${signedDate ? new Date(signedDate).toISOString().slice(0, 16) : localDatetime}">
                        </div>
                    </form>
                    <div id="signatureError" class="alert alert-danger d-none"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveSignedBy">Save</button>
                </div>
            </div>
        </div>
    </div>
    `;
    
    // Add modal to the document
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // Initialize and show the modal
    const modal = new bootstrap.Modal(document.getElementById('signedByModal'));
    modal.show();
    
    // Add event listener to the save button
    document.getElementById('saveSignedBy').addEventListener('click', function() {
        const newSignedBy = document.getElementById('signatureName').value;
        const newSignedDateTime = document.getElementById('signatureDateTime').value;
        updateSignedBy(newSignedBy, newSignedDateTime, modal);
    });
}

// Function to update Signed By with error handling
async function updateSignedBy(name, dateTime, modal) {
    const awbNumber = document.getElementById('awbNumber').textContent.replace('#', '');
    const errorElement = document.getElementById('signatureError');
    
    try {
        const response = await fetch(`/admin/updateSignature/${awbNumber}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                signedBy: name,
                signedAt: dateTime
            })
        });
        
        const data = await response.json();
        
        if (!response.ok) {
            // Show error message in modal
            errorElement.textContent = data.message || 'Failed to update signature information';
            errorElement.classList.remove('d-none');
            return;
        }
        
        if (data.success) {
            // Update UI
            document.getElementById('signedBy').textContent = name || 'Not signed yet';
            
            // Format the returned timestamp for display
            const formattedDate = new Date(data.signedAt).toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
            
            document.getElementById('signedDate').textContent = `Signed on: ${formattedDate}`;
            
            // Close modal
            modal.hide();
            
            // Show success message
            alert('Signature information updated successfully!');
        } else {
            // Show error message in modal
            errorElement.textContent = data.message || 'Failed to update signature information';
            errorElement.classList.remove('d-none');
        }
    } catch (error) {
        console.error('Error:', error);
        // Show error message in modal
        errorElement.textContent = 'An error occurred while updating signature information';
        errorElement.classList.remove('d-none');
    }
}
    
    // Helper function to format dates
    function formatDate(dateString) {
        if (!dateString) return '';
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
        });
    }
});
        window.trackingSystem = {
            toggleAddLocationForm: function () {
                console.log("Toggle button clicked");
                const form = document.getElementById("addLocationForm");
                if (form) {
                    form.style.display = form.style.display === "none" || form.style.display === "" ? "block" : "none";
                } else {
                    console.error("Form not found");
                }
            }
        };

        document.getElementById("locationForm").addEventListener("submit", function (e) {
            e.preventDefault();
            const formData = new FormData(this);
            console.log("Form submitted", Object.fromEntries(formData.entries()));
            alert("Location added successfully!");
            window.trackingSystem.toggleAddLocationForm();
        });

        // Function to append new timeline event to the container
        function renderTimelineEvent(event) {
            const timelineContainer = document.getElementById('timeline-container');
            const eventElement = document.createElement('div');
            eventElement.className = 'timeline-event';
            eventElement.innerHTML = `
            <div>
                <strong>Location:</strong> ${event.location}
            </div>
            <div>
                <strong>Status:</strong> ${event.status}
            </div>
            <div>
                <strong>Description:</strong> ${event.description || 'N/A'}
            </div>
            <div>
                <strong>Timestamp:</strong> ${new Date(event.timestamp).toLocaleString()}
            </div>
        `;
            timelineContainer.appendChild(eventElement);
        }

        // Submit form via AJAX
        // Submit form via AJAX


        // Submit form via AJAX
        document.getElementById('locationForm').addEventListener('submit', async (event) => {
    event.preventDefault();

    const form = event.target;
    const formData = new FormData(form);
    const awbNumber = document.getElementById('awbNumber').textContent.replace('#', '');

    try {
        const response = await fetch(`/admin/addLocation/${awbNumber}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                location: formData.get('location'),
                status: formData.get('status'),
                description: formData.get('description')
            })
        });

        if (!response.ok) {
            throw new Error('Server responded with error');
        }

        const data = await response.json();

        // Update the current location and facility type in the UI
        document.getElementById('currentLocation').textContent = data.currentLocation;
        document.getElementById('facilityType').textContent = data.facilityType || data.description || "N/A";

        // Get the newly added timeline item from the response
        const newTimelineEvent = data.timeline[data.timeline.length - 1];

        // Create and append the new timeline item
        const timelineWrapper = document.querySelector('.timeline-wrapper');
        const newTimelineItem = `
    <div class="timeline-item" 
         data-timeline-id="${newTimelineEvent._id}" 
         data-status="${newTimelineEvent.status}"
         data-completed="${newTimelineEvent.isCompleted}">
        <div class="timeline-marker active">
            <i class="fas fa-check"></i>
        </div>
        <div class="timeline-content active">
            <div class="location-info">
                <h5>${newTimelineEvent.location}</h5>
                <p class="location-address mb-2">
                    <i class="fas fa-map-marker-alt me-2 text-primary"></i>${newTimelineEvent.description || ''}
                </p>
                <div class="d-flex align-items-center gap-3">
                    <span class="location-timestamp">
                        <i class="far fa-clock me-2"></i>${new Date(newTimelineEvent.timestamp).toLocaleString()}
                    </span>
                    <span class="status-badge">
                        ${newTimelineEvent.status}
                    </span>
                </div>
            </div>
        </div>
     </div>
`;
        timelineWrapper.insertAdjacentHTML('beforeend', newTimelineItem);

        // Reset form and hide it
        form.reset();
        window.trackingSystem.toggleAddLocationForm();

        // Completely reinitialize the timeline system
        if (window.timelineSystem) {
            window.timelineSystem.reinitialize();
        }

    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while adding location.');
    }
});


        function addTimelineEventToUI(event) {
            const timelineList = document.getElementById('timelineList'); // Assuming an element with this ID
            const newEvent = document.createElement('li');
            newEvent.textContent = `${event.timestamp}: ${event.location} (${event.status}) - ${event.description || 'No description'}`;
            timelineList.appendChild(newEvent);
        }


        function getCurrentUser() {
            return document.querySelector('meta[name="user-id"]')?.content || 'system';
        }

        class TimelineSystem {
    constructor() {
        this.initializeTimeline();
    }

    reinitialize() {
        // Clear existing event handlers first
        this.timelineItems?.forEach(item => {
            const marker = item.querySelector('.timeline-marker');
            if (marker) {
                const newMarker = marker.cloneNode(true);
                marker.parentNode.replaceChild(newMarker, marker);
            }
        });

        // Re-initialize everything from scratch
        this.initializeTimeline();
    }
     async deleteTimelineItem(timelineId) {
    try {
        if (!confirm('Are you sure you want to delete this timeline item?')) {
            return;
        }
        
        const awbNumber = document.getElementById('awbNumber').textContent.replace('#', '');
        
        const response = await fetch('/admin/delete-timeline', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                id: timelineId,
                awbNumber: awbNumber
            })
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('Server error response:', errorText);
            throw new Error(`Server request failed: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message);
        }
        
        // Find and remove the timeline item from DOM
        const timelineItem = document.querySelector(`.timeline-item[data-timeline-id="${timelineId}"]`);
        if (timelineItem) {
            timelineItem.remove();
        }
        
        // Update status badge
        const statusBadge = document.querySelector('.status-badge');
        if (statusBadge && data.status) {
            statusBadge.textContent = data.status;
        }
        
        // Update current location
        const currentLocationElement = document.getElementById('currentLocation');
        if (currentLocationElement && data.currentLocation) {
            currentLocationElement.textContent = data.currentLocation;
        }
        
        // Update facility type
        const facilityTypeElement = document.getElementById('facilityType');
        if (facilityTypeElement && data.facilityType) {
            facilityTypeElement.textContent = data.facilityType;
        }

        // Update progress line
        this.updateProgressLine();
        
        alert('Timeline item deleted successfully!');

    } catch (error) {
        console.error('Timeline deletion error:', error);
        alert(`Error deleting timeline item: ${error.message}`);
    }
}

    initializeTimeline() {
        this.timelineItems = document.querySelectorAll('.timeline-item');
        this.progressLine = document.getElementById('progressLine');
        this.updateProgressLine();
        this.bindEvents();
    }

    bindEvents() {
    this.timelineItems.forEach(item => {
        const marker = item.querySelector('.timeline-marker');
        if (marker) {
            marker.addEventListener('click', (e) => {
                e.preventDefault();
                const timelineId = item.dataset.timelineId;
                if (timelineId) {
                    this.handleTimelineUpdate(item);
                }
            });
        }
        
        // Add event listener for delete button
        const deleteBtn = item.querySelector('.delete-timeline-btn');
        if (deleteBtn) {
            deleteBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation(); // Prevent event bubbling to parent elements
                const timelineId = deleteBtn.dataset.timelineId;
                if (timelineId) {
                    this.deleteTimelineItem(timelineId);
                }
            });
        }
    });
}

   async handleTimelineUpdate(timelineItem) {
    try {
        const timelineId = timelineItem.dataset.timelineId;
        const currentCompleted = timelineItem.dataset.completed === 'true';
        const newCompleted = !currentCompleted;
        const awbNumber = document.getElementById('awbNumber').textContent.replace('#', '');

        // Update UI optimistically
        this.updateItemUI(timelineItem, newCompleted);

        const response = await fetch('/admin/update-timeline', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                id: timelineId,
                awbNumber: awbNumber,
                isCompleted: newCompleted
            })
        });

        if (!response.ok) {
            // Revert UI if update failed
            this.updateItemUI(timelineItem, currentCompleted);
            const errorText = await response.text();
            console.error('Server error response:', errorText);
            throw new Error(`Server request failed: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.success) {
            // Revert UI if update failed
            this.updateItemUI(timelineItem, currentCompleted);
            throw new Error(data.message);
        }

        // Update status badge
        const statusBadge = document.querySelector('.status-badge');
        if (statusBadge && data.status) {
            statusBadge.textContent = data.status;
        }
        
        // Update current location
        const currentLocationElement = document.getElementById('currentLocation');
        if (currentLocationElement && data.currentLocation) {
            currentLocationElement.textContent = data.currentLocation;
        }
        
        // Update facility type
        const facilityTypeElement = document.getElementById('facilityType');
        if (facilityTypeElement && data.facilityType) {
            facilityTypeElement.textContent = data.facilityType;
        }

        // Update progress line
        this.updateProgressLine();

    } catch (error) {
        console.error('Timeline update error:', error);
        alert(`Error updating timeline: ${error.message}`);
    }
}

    updateItemUI(item, isCompleted) {
        const marker = item.querySelector('.timeline-marker');
        const content = item.querySelector('.timeline-content');

        item.dataset.completed = isCompleted.toString();

        if (isCompleted) {
            marker.classList.add('completed');
            marker.classList.remove('active');
            content.classList.add('completed');
            content.classList.remove('active');
        } else {
            marker.classList.remove('completed', 'active');
            content.classList.remove('completed', 'active');
        }
    }
    
    updateProgressLine() {
        if (!this.timelineItems || !this.timelineItems.length || !this.progressLine) return;

        const completedItems = Array.from(this.timelineItems).filter(
            item => item.dataset.completed === 'true'
        );
        const progressHeight = this.timelineItems.length > 0 ?
            (completedItems.length / this.timelineItems.length) * 100 : 0;
        this.progressLine.style.height = `${progressHeight}%`;
    }
}     

        // Initialize timeline system
        document.addEventListener('DOMContentLoaded', () => {
            window.timelineSystem = new TimelineSystem();
        });

       
    </script>
</body>

</html>